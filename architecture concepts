1- The entry point for all requests to a Laravel application is the public/index.php file. 
   All requests are directed to this file by your web server (Apache / Nginx) configuration.
   
2- The index.php file loads the Composer generated autoloader definition, then retrieves an instance of the Laravel application 
   from bootstrap/app.php script.
   // The first action taken by Laravel itself is to create an instance of the application / service container.
   
3- Next, the incoming request -> HTTP/console kernel, (depending on which request type).

4- The HTTP kernel extends the Illuminate\Foundation\Http\Kernel class, 
   which defines an array of bootstrappers that will be run before the request is executed.
   // bootstrappers DO: 
   // loading the service providers which are responsible for bootstrapping all of the framework's various components,
      such as the database, queue, validation, and routing components. 
      ALSO DO configure error handling, configure logging, detect the application environment,
   // defines a list of HTTP middleware that all requests must pass through before being handled by the application.
   // by reading and writing the HTTP session, determining if the application is in maintenance mode, verifying the CSRF token, and so ... 
   // The method signature for the HTTP kernel's handle method is quite simple: receive a Request and return a Response. 
   
 5- after bootstraping the Request will be handed off to the router for dispatching to a route or controller.
 // By default, the AppServiceProvider is fairly empty. This provider is a great place to add your application's
    own bootstrapping and service container bindings.
   
///////////////////////// SERVICE CONTAINAER ///////////////////////////
The Laravel service container is a powerful tool for managing class dependencies and performing dependency injection. 
(we will inject a service that is able to retrieve data)
// ince the repository is injected, we are able to easily swap it out with another implementation. (useful for testing)

//// BINDING (شیرازه) ////
Almost all of your service container bindings will be registered within service providers.

/// Simple Bindings
1- Within a service provider, you always have access to the container via the $this->app property.
// We can register a binding using the bind method, passing the class or interface name that we wish to register
// along with a Closure that returns an instance of the class:

       $this->app->bind('HelpSpot\API', function ($app) {
           return new \HelpSpot\API($app->make('HttpClient'));
       });
2- we can bind a class, an object or even an interface (e.g. a listener to an event) into the container. 
3- binding is a wide concept which is important to learn when we want to create a service provider
4- binding help us to write a code much clear. one of useful event of this concept is to allow us to use a service provider just with
   typ-hint it in the constructor of required class which in common uses, wil cause of automatic injection (RESOLVING) of a class instace . 

///////////////////////// SERVICE PROVIDERS ///////////////////////////
service provders able us to bootstrpped or registering things, including registering service container bindings,event listeners,
middleware, and even routes. Service providers are the central place to configure your application.


///////////////////////// FACADES ///////////////////////////
Facades provide a "static" interface to classes that are available in the application's service container. 
Laravel ships with many facades which provide access to almost all of Laravel's features. 
// Facades have many benefits. They provide a terse, memorable syntax that allows you to use Laravel's features without remembering
// long class names that must be injected or configured manually. Furthermore, because of their unique usage of PHP's dynamic methods,
   they are easy to test.
// they are also similar with helper functions and practically no difference between them. 


///////////////////////// CONTRACTS ///////////////////////////
Laravel's Contracts are a set of interfaces that define the core services provided by the framework.
For example, a Illuminate\Contracts\Queue\Queue contract defines the methods needed for queueing jobs,
while the Illuminate\Contracts\Mail\Mailer contract defines the methods needed for sending e-mail.


// much of the decision to use contracts or facades will come down to personal taste and the tastes of your development team.
Both contracts and facades can be used to create robust, well-tested Laravel applications.
As long as you are keeping your class' responsibilities focused, you will notice very few practical differences between using
contracts and facades.

