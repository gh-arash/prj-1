1- Defining A Layout: Two of the primary benefits of using Blade are template inheritance and sections. 
// The @section directive, as the name implies, defines a section of content, 
// The @yield directive is used to display the contents of a given section.

2- Extending A Layout: define a child page that inherits the layout.
// use the Blade @extends directive to specify which layout the child view should "inherit".
// views which extend a Blade layout may inject content into the layout's sections using @section directives.
// The @parent directive will be replaced by the content of the layout when the view is rendered
// The @endsection directive will only define a section while @show will define and immediately yield the section.

3- Control Structures: Blade also provides convenient shortcuts for common PHP control structures, such as conditional
   statements and loops.
   
 3-1- If Statements:
              //  @if (count($records) === 1)
                 I have one record!
                 @elseif (count($records) > 1)
                  I have multiple records!
                 @else I don't have any records! @endif

              // @unless (Auth::check())
                 You are not signed in. @endunless

              // @isset($records)
                 $records is defined and is not null... @endisset

              // @empty($records)
                 $records is "empty"... @endempty

              // @auth
                 The user is authenticated... @endauth
     
     Authentication Directives    
               @auth
              // The user is authenticated... @endauth
              @guest
              // The user is not authenticated... @endguest
     Section Directives:  check if a section has content using the @hasSection directive
              // @hasSection('navigation')
                 @endif
 3-2- Switch Statements >>> MORE DETAIL IN DOCUMENATION
 
 3-3- Loops AND Loops VARIABLES >>> MORE DETAIL IN DOCUMENATION
 
 3-4- Comments: {{-- This comment will not be present in the rendered HTML --}}
 
 3-5- PHP: In some situations, it's useful to embed PHP code into your views. You can use the Blade @php directive to execute
      a block of plain PHP within your template:
      // @php
         @endphp

4- Forms:
   4-1- Validation Errors: The @error directive may be used to quickly check if validation error messages exist for a given attribute.
        Within an @error directive, you may echo the $message variable to display the error message
   // <input id="title" type="text" class="@error('title') is-invalid @enderror">
@error('title')
    <div class="alert alert-danger">{{ $message }}</div>
@enderror   
   // You may pass the name of a specific error bag as the second parameter to the @error directive to retrieve validation error
      messages on pages containing multiple forms   >>> @error('email', 'login')
      
     
     
     
  
