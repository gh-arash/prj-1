1- Configuring The Locale: The default language for your application is stored in the config/app.php configuration file. 
   You may modify this value to suit the needs of your application. You may also change the active language at runtime using the 
   setLocale method on the App facade: 
   // Route::get('welcome/{locale}', function ($locale) {
    if (! in_array($locale, ['en', 'es', 'fr'])) {
        abort(400); }
        App::setLocale($locale);
   
   // when the active language does not contain a given translation string:  >>> 'fallback_locale' => 'en', in config/app.php
   
1-1- Determining The Current Locale: 
     // to determine the current locale >>> $locale = App::getLocale();
     // check if the locale is a given value >>> if (App::isLocale('en')) {...}

2- Defining Translation Strings:
2-1- Using Short Keys: translation strings are stored in files within the resources/lang directory.: 
     resources/lang/es/messages.php >>> return ['welcome' => 'خوش آمدید'];
     
2-2- Using Translation Strings As Keys: For applications with heavy translation requirements, defining every string with a "short key"
     can become quickly confusing when referencing them in your views. For this reason, Laravel also provides support for defining
     translation strings using the "default" translation of the string as the key.
     
     // Translation files that use translation strings as keys are stored as JSON files in the resources/lang directory. For example,
        if your application has a Spanish translation, you should create a resources/lang/es.json file:
        {"I love programming.": "Me encanta programar."}
        
3- Retrieving Translation Strings:
   // Using Short Keys                  >>> __('messages.welcome');
   // Using Translation Strings As Keys >>> __('I love programming.');
   
3-1- inside the blades: you may use the {{ }} syntax to echo the translation string or use the @lang directive    
   >>> {{ __('messages.welcome') }}
   >>> @lang('messages.welcome')
   
4- Replacing Parameters In Translation Strings: If you wish, you may define placeholders in your translation strings.
   All placeholders are prefixed with a :. For example, you may define a welcome message with a placeholder name
   // 'welcome' => 'Welcome, :name',
   To replace the placeholders when retrieving a translation string, pass an array of replacements as the second argument
   to the __ function: >>> echo __('messages.welcome', ['name' => 'dayle']);
 
   // If your placeholder contains all capital letters: 
      'welcome' => 'Welcome, :NAME', // Welcome, DAYLE
      'goodbye' => 'Goodbye, :Name', // Goodbye, Dayle
      
 5- Pluralization  >>> in DOCUMENTATION
   
   
   
   
   
