1- Writing The Validation Logic: we will use the validate method provided by the Illuminate\Http\Request object.
   If the validation rules pass, your code will keep executing normally; however, if validation fails, an exception will be thrown
   and the proper error response will automatically be sent back to the user.
   // In addition, all of the validation errors will automatically be flashed to the session.
   
   // $request->validate([
        'title' => 'required|unique:posts|max:255',
        'body' => 'required', ]);
   
   // To validate a request and store any error messages within a named error bag >>> $request->validateWithBag('errorbag', [rules])
   
   // Stopping On First Validation Failure: In this example, if the unique rule on the title attribute fails, the max rule 
      will not be checked:
      'title' => 'bail|required|unique:posts|max:255',
      'body'  => 'required',
      
 2- Displaying The Validation Errors: Laravel will check for errors in the session data, and automatically bind them to the view if
    they are available. The $errors variable will be an instance of Illuminate\Support\MessageBag.
    // The $errors variable is bound to the view by the Illuminate\View\Middleware\ShareErrorsFromSession middleware, which is provided
       by the web middleware group. When this middleware is applied an $errors variable will always be available in your views,
       allowing you to conveniently assume the $errors variable is always defined and can be safely used.
  
   // to quickly check if validation error messages exist for a given attribute >>>  @error Blade directive:
     <!-- /resources/views/post/create.blade.php -->
        <label for="title">Post Title</label>
        <input id="title" type="text" class="@error('title') is-invalid @enderror">
        @error('title')
            <div class="alert alert-danger">{{ $message }}</div>
        @enderror
        
    //  you will often need to mark your "optional" request fields as nullable if you do not want the validator to consider null
        values as invalid >>> 'publish_at' => 'nullable|date',
        
    // In this example, we used a traditional form to send data to the application. However, many applications use AJAX requests.
       When using the validate method during an AJAX request, Laravel will not generate a redirect response. Instead, Laravel
       generates a JSON response containing all of the validation errors. This JSON response will be sent with a 422 HTTP status code.    
    
3- Form Request Validation:
   // Creating Form Requests >>> php artisan make:request StoreBlogPost
   // All you need to do is type-hint the request on your controller method. The incoming form request is validated before the
      controller method is called
      
   // If validation fails, a redirect response will be generated to send the user back to their previous location.
      The errors will also be flashed to the session so they are available for display. If the request was an AJAX
      request, a HTTP response with a 422 status code will be returned to the user including a JSON representation
      of the validation errors.
      
   // Adding After Hooks To Form Requests: If you would like to add an "after" hook to a form request, you may use the withValidator
      method. This method receives the fully constructed validator, allowing you to call any of its methods before the validation 
      rules are actually evaluated   
      
   // Authorizing Form Requests: The form request class also contains an authorize method. Within this method, you may check if
      the authenticated user actually has the authority to update a given resource. For example, you may determine if a user
      actually owns a blog comment they are attempting to update   
      
   // Customizing The Error Messages: ou may customize the error messages used by the form request by overriding the messages method.
   public function messages() {return ['title.required' => 'A title is required',];}
   
   // Customizing The Validation Attributes: f you would like the :attribute portion of your validation message to be replaced with 
      a custom attribute name, you may specify the custom names by overriding the attributes method
   
   // Prepare Input For Validation: If you need to sanitize any data from the request before you apply your validation rules,
      you can use the prepareForValidation method
        
4- Manually Creating Validators: f you do not want to use the validate method on the request, you may create a validator instance
   manually using the Validator facade 
   // MORE DEAIAL IN DOCUMENTATION
   
   // Automatic Redirection:
      If you would like to create a validator instance manually but still take advantage of the automatic redirection offered
      by the request's validate method, you may call the validate method on an existing validator instance.
      If validation fails, the user will automatically be redirected or, in the case of an AJAX request, a JSON response will be
      returned:
    // You may use the validateWithBag method to store the error messages in a named error bag if validation fails  
        
    // Named Error Bags: If you have multiple forms on a single page, you may wish to name the MessageBag of errors,
       allowing you to retrieve the error messages for a specific form. Pass a name as the second argument to withErrors  
       
5- Working With Error Messages: After calling the errors method on a Validator instance, you will receive an
   Illuminate\Support\MessageBag instance, which has a variety of convenient methods for working with error messages.
   The $errors variable that is automatically made available to all views is also an instance of the MessageBag class.       
       
   // Retrieving The First Error Message For A Field >>> $errors = $validator->errors()->first('email');
   
   // Retrieving All Error Messages For A Field >>> foreach ($errors->get('email') as $message) {}
   
   // Retrieving All Error Messages For each of the array elements Field>>> foreach ($errors->get('attachments.*') as $message) {}
   
   // Retrieving All Error Messages For All Fields >>> foreach ($errors->all() as $message) {}
   
   // Determining If Messages Exist For A Field >>> if ($errors->has('email')) {}
       
   // Custom Error Messages
   // Specifying A Custom Message For A Given Attribute: 
       $messages = ['email.required' => 'We need to know your e-mail address!',];
   // Specifying Custom Messages In Language Files >>>> MORE CONVENIENT   
       
   // Specifying Custom Values In Language Files    
   >>> $request->validate(['credit_card_number' => 'required_if:payment_type,cc']);
   
      >>> The credit card number field is required when payment type is cc.
      
   >>> 'values' => ['payment_type' => ['cc' => 'credit card'],]
   
      >>> The credit card number field is required when payment type is credit card.
   
