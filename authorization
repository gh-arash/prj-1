there are two primary ways of authorizing actions: GATES and POLICIES.
// Gates provide a simple, Closure based approach to authorization
// policies, like controllers, group their logic around a particular model or resource. 

// Most applications will most likely contain a mixture of gates and policies.
   Gates are most applicable to actions which are not related to any model or resource, such as viewing an administrator dashboard. 
   In contrast, policies should be used when you wish to authorize an action for a particular model or resource
   
1- GATES:
1-1- Writing Gates: are typically defined in the App\Providers\AuthServiceProvider class using the Gate facade.
     >>> Gate::define('edit-settings', function ($user) {return $user->isAdmin;}

1-2- Authorizing Actions: To authorize an action using gates, you should use the allows or denies methods, 
     WITHOUT required to pass the currently authenticated user to these methods:
     >>> if (Gate::allows('edit-settings')) {// The current user can edit settings}
     >>> if (Gate::denies('update-post', $post)) {// The current user can't update the post...}
     
     // If you would like to determine if a particular user is authorized to perform an action, you may use the forUser method
        on the Gate facade:
        >>> if (Gate::forUser($user)->allows('update-post', $post)) {// The user can update the post...}
     
     // TO authorize multiple actions at a time with the any or none methods: 
        >>> if (Gate::any(['update-post', 'delete-post'], $post)) { // The user can update or delete the post}
        
     // Authorizing Or Throwing Exceptions:
        if the user is not allowed to perform the given action, you may use the Gate::authorize method. Instances
        of AuthorizationException are automatically converted to 403 HTTP response
        >>> Gate::authorize('update-post', $post);
        
     // Supplying Additional Context: 
        The gate methods for authorizing abilities (allows, denies, check, any, none, authorize, can, cannot) and the authorization
        Blade directives (@can, @cannot, @canany) can receive an array as the second argument. >>> MORE DETAIL IN DOCUMENTATION
        
 1-3- Gate Responses
      to return a more detailed response, including an error message. To do so, you may return a Illuminate\Auth\Access\Response
      from your gate:
      >>> ate::define('edit-settings', function ($user) {
    return $user->isAdmin
                ? Response::allow()
                : Response::deny('You must be a super administrator.');});
                
     // When returning an authorization response from your gate, the Gate::allows method will still return a simple boolean value;
        however, you may use the Gate::inspect method to get the full authorization response returned by the gate:           
      >>> $response = Gate::inspect('edit-settings', $post);
            if ($response->allowed()) {
                // The action is authorized...
            } else {
                echo $response->message();
                
 1-4- Intercepting Gate Checks
      Sometimes, you may wish to grant all abilities to a specific user. You may use the before method to define a callback
      that is run before all other authorization checks:
      // Gate::before(function ($user, $ability) {
          if ($user->isSuperAdmin()) {
           return true;}}); 
      // MORE DETAIL IN DOCUMENTATION
 
 2- Creating Policies: 
    Policies are classes that organize authorization logic around a particular model or resource. For example, if your application
    is a blog, you may have a Post model and a corresponding PostPolicy to authorize user actions such as creating or updating posts:
    
 2-1- Generating Policies:
      >>> php artisan make:policy PostPolicy
      >>> php artisan make:policy PostPolicy --model=Post: to generate a class with the basic "CRUD"
 
 2-2- Registering Policies:
      The AuthServiceProvider included with fresh Laravel applications contains a policies property which maps your Eloquent models
      to their corresponding policies:
      >>> protected $policies = [Post::class => PostPolicy::class,];
      
      // Policy Auto-Discovery:
         Instead of manually registering model policies, Laravel can auto-discover policies as long as the model and policy
         follow standard Laravel naming conventions. MORE DETAIL IN DOCUMENTATION
         
 2-3- Writing Policies:
      Once the policy has been registered, you may add methods for each action it authorizes. 
      >>> class PostPolicy
          { public function update(User $user, Post $post)
            {
                return $user->id === $post->user_id;}})
      
      // Policy Responses:
      examole above will return simple boolean values. however you may return an Illuminate\Auth\Access\Response from your policy 
      method:
      >>> public function update(User $user, Post $post)
          {
            return $user->id === $post->user_id
                        ? Response::allow()
                        : Response::deny('You do not own this post.');
    
    // Methods Without Models: 
       Some policy methods only receive the currently authenticated user and not an instance of the model they authorize.
       This situation is most common when authorizing create actions. For example, if you are creating a blog, you may wish to
       check if a user is authorized to create any posts at all.
       >>> public function create(User $user) {...}
       
   // Guest Users: 
      by default, all gates and policies automatically return false if the incoming HTTP request was not initiated by an authenticated
      user. However, you may allow these authorization checks to pass through to your gates and policies by declaring an
      "optional" type-hint or supplying a null default value for the user argument definition: MORE DETAIL IN DOCUMENTATION
      
      
 3- Authorizing Actions Using Policies
 3-1- Via The User Model: The User model that is included with your Laravel application includes two helpful methods for authorizing
      actions: can and cant.
      >>> if ($user->can('update', $post)) {...}
      
      // If a policy is registered for the given model, the can method will automatically call the appropriate policy and return
        the boolean result. If no policy is registered for the model, the can method will attempt to call the Closure based Gate
        matching the given action name.
        
     // Actions That Don't Require Models:
        some actions like create may not require a model instance. In these situations, you may pass a class name to the can method.
        The class name will be used to determine which policy to use when authorizing the action:
        >>> if ($user->can('create', Post::class)) {...}
        
 3-2- Via Middleware: Laravel includes a middleware that can authorize actions before the incoming request even reaches your
         routes or controllers: MORE DETAIL IN DOCUMENTATION
         
 3-3-  Via Controller Helpers:
        >>> public function update(Request $request, Post $post){$this->authorize('update', $post);}
        // WITH an HTTP response with a 403 status code
        
     // Actions That Don't Require Models:
        >>> public function create(Request $request) { $this->authorize('create', Post::class);}
        
     // Authorizing Resource Controllers:  MORE DETAIL IN DOCUMENTATION
     
 3-4- Via Blade Templates: USNIG @can and so on ... 
      
      
      
      
    
    
    
    
    
    
    
    
      
      
      
      
        
        
        
        
        
     
