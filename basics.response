HTTP Responses: 
// All routes and controllers should return a response to be sent back to the user's browser.
   Laravel provides several different ways to return responses. The most basic response is returning a string from a route or controller.
   The framework will automatically convert the string into a full HTTP response:
   // Route::get('/', function () {return 'Hello World';});
 
 // In addition to returning strings from your routes and controllers, you may also return arrays. 
 The framework will automatically convert the array into a JSON response:
 Route::get('/', function () {return [1, 2, 3];});
 
 // you can also return Eloquent collections from your routes or controllers. They will automatically be converted to JSON

1- Response Objects: you will be returning full Illuminate\Http\Response instances or views.
   Returning a full Response instance allows you to customize the response's HTTP status code and headers.
   Route::get('home', function () {
   return response('Hello World', 200)->header('Content-Type', 'text/plain');});

1-1- Attaching Headers To Responses: you may use the header method to add a series of headers to the response before sending it back to
the user:
return response($content)
            ->withHeaders([
                'Content-Type' => $type,
                'X-Header-One' => 'Header Value',
                'X-Header-Two' => 'Header Value',]);
 
 1-2-Cache Control Middleware: Laravel includes a cache.headers middleware, which may be used to quickly set the Cache-Control header
 for a group of routes. MORE DETAIL IN DOCUMENATION
 MORE OPTIONS : Attaching Cookies To Responses
 
 2- Redirects: Redirect responses are instances of the Illuminate\Http\RedirectResponse class, and contain the proper headers
    needed to redirect the user to another URL.
    // There are several ways to generate a RedirectResponse instance. The simplest method is to use the global redirect helper:
    Route::get('dashboard', function () {return redirect('home/dashboard');});
    
 2-1- Sometimes you may wish to redirect the user to their previous location, such as when a submitted form is invalid.
      You may do so by using the global back helper function. Since this feature utilizes the session, make sure the 
      route calling the back function is using the web middleware group or has all of the session middleware applied:   
         Route::post('user/profile', function () {// Validate the request...
            return back()->withInput();});
 2-2- Redirecting To Named Routes: When you call the redirect helper with no parameters, an instance of 
      Illuminate\Routing\Redirector is returned, allowing you to call any method 
      // to generate a RedirectResponse to a named route, you may use the route method:
         >>> return redirect()->route('login');
      //  For a route with the following URI: profile/{id}
         >>> return redirect()->route('profile', ['id' => 1]);   
  
  2-3- Redirecting To Controller Actions: 
       return redirect()->action('HomeController@index');
       If your controller route requires parameters, you may pass them as the second argument to the action method:
       // return redirect()->action('UserController@profile', ['id' => 1]);
 
 2-3- Redirecting To External Domains 
      // return redirect()->away('https://www.google.com');
      
 2-4- Redirecting With Flashed Session Data >>> SEE DOCUMENTATION
 
 3- Other Response Types: The response helper may be used to generate other types of response instances.
    When the response helper is called without arguments, an implementation of the Illuminate\Contracts\Routing\ResponseFactory contract
    is returned. This contract provides several helpful methods for generating responses.
 
 3-1- View Responses: 
      If you need control over the response's status and headers but also need to return a view as the response's content,
      you should use the view method:
      // return response()
            ->view('hello', $data, 200)
            ->header('Content-Type', $type);
      // Of course, if you do not need to pass a custom HTTP status code or custom headers,
         you should use the global view helper function.
 
 3-2- JSON Responses: The json method will automatically set the Content-Type header to application/json, as well as convert
      the given array to JSON using the json_encode PHP function:
          return response()->json([
          'name' => 'Abigail',
          'state' => 'CA']);
 
 4- File Downloads: The download method may be used to generate a response that forces the user's browser to download
    the file at the given path. The download method accepts a file name as the second argument to the method, which
    will determine the file name that is seen by the user downloading the file. Finally, you may pass an array of
    HTTP headers as the third argument to the method:
    // return response()->download($pathToFile);
    // return response()->download($pathToFile, $name, $headers);
    // return response()->download($pathToFile)->deleteFileAfterSend();
 5- Streamed Downloads >>> DOCUMENTATION
 
 6- File Responses: The file method may be used to display a file, such as an image or PDF, directly in the user's browser
    instead of initiating a download. This method accepts the path to the file as its first argument and an array of headers
    as its second argument:
    // return response()->file($pathToFile, $headers);
    
 7- Response Macros: If you would like to define a custom response that you can re-use in a variety of your routes and controllers,
    you may use the macro method on the Response facade. MORE DETAIL >>> DOCUMENTATION
 
