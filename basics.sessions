Since HTTP driven applications are stateless, sessions provide a way to store information about the user across multiple requests.
Laravel ships with a variety of session backends that are accessed through an expressive, unified API.

1- Using The Session: 
1-1- Retrieving Data: there are two ways:

// accessing the session via a Request instance, which can be type-hinted on a controller method:
>>> public function show(Request $request, $id) {$value = $request->session()->get('key');}
pass a default value >>> $value = $request->session()->get('key', 'default');
or                   >>> $value = $request->session()->get('key', function () {return 'default';});

// The Global Session Helper:
// Retrieve a piece of data from the session with a  a default value... >>> $value = session('key', 'default');
// Store a piece of data in the session ...                             >>> session(['key' => 'value']);

1-2- Retrieving All Session Data:
     >>> $data = $request->session()->all();

1-3- Determining If An Item Exists In The Session: 
     The has method returns true if the item is present and is not null >>> if ($request->session()->has('users')) {...}
      if an item is present in the session, even if its value is null   >>> if ($request->session()->exists('users')) {...}
      
1-4- Storing Data:
// Via a request instance...
>>> $request->session()->put('key', 'value');
// Via the global helper...
>>> session(['key' => 'value']);

1-5- Pushing To Array Session Values : push a new value onto a session value that is an array. 
     >>> $request->session()->push('key', 'added value');
     
1-6- Retrieving & Deleting An Item 
     >>> $value = $request->session()->pull('key', 'default');     
     
1-7- Flash Data: ometimes you may wish to store items in the session only for the next request. You may do so using the flash method.
     Data stored in the session using this method will be available immediately and during the subsequent HTTP request. After the
     subsequent HTTP request, the flashed data will be deleted. 
     // Flash data is primarily useful for short-lived status messages:
     >>> $request->session()->flash('status', 'Task was successful!');
     
     // keep all of the flash data for an additional request:
     >>> $request->session()->reflash();
     // only need to keep specific flash data
     >>> $request->session()->keep(['username', 'email']);
     
 1-8- Deleting Data:
      // Forget a single key              >>> $request->session()->forget('key');
      // Forget multiple keys             >>> $request->session()->forget(['key1', 'key2']);
         remove all data from the session >>> $request->session()->flush();
         
 1-9- Regenerating The Session ID: 
      Regenerating the session ID is often done in order to prevent malicious users from exploiting a session fixation attack on
      your application
      Laravel automatically regenerates the session ID during authentication if you are using the built-in LoginController;
      however, if you need to manually regenerate the session ID, you may use the regenerate method
     
     
     
     
     
